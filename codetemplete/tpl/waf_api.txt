package api

import (
	"SamWaf/enums"
	"SamWaf/global"
	"SamWaf/model"
	"SamWaf/model/common/response"
	"SamWaf/model/request"
	"SamWaf/model/spec"
	"errors"
	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
)

type Waf{{.EntityName}}Api struct {
}

func (w *Waf{{.EntityName}}Api) AddApi(c *gin.Context) {
	var req request.Waf{{.EntityName}}AddReq
	err := c.ShouldBindJSON(&req)
	if err == nil {
	     {{if .UniFields}}
	        cnt := waf{{.EntityName | pascalCase}}Service.CheckIsExistApi(req)
            if cnt==0 {
                err = waf{{.EntityName | pascalCase}}Service.AddApi(req)
                if err == nil {
                    response.OkWithMessage("添加成功", c)
                } else {
                    response.FailWithMessage("添加失败", c)
                }
                return
            } else {
                response.FailWithMessage("当前记录已经存在", c)
                return
            }
	     {{else}}
             err = waf{{.EntityName | pascalCase}}Service.AddApi(req)
             if err == nil {
                 response.OkWithMessage("添加成功", c)
             } else {
                 response.FailWithMessage("添加失败", c)
             }
             return
	     {{end}}

	} else {
		response.FailWithMessage("解析失败", c)
	}
}

func (w *Waf{{.EntityName}}Api) GetDetailApi(c *gin.Context) {
	var req request.Waf{{.EntityName}}DetailReq
	err := c.ShouldBind(&req)
	if err == nil {
		bean := waf{{.EntityName | pascalCase}}Service.GetDetailApi(req)
		response.OkWithDetailed(bean, "获取成功", c)
	} else {
		response.FailWithMessage("解析失败", c)
	}
}

func (w *Waf{{.EntityName}}Api) GetListApi(c *gin.Context) {
	var req request.Waf{{.EntityName}}SearchReq
	err := c.ShouldBindJSON(&req)
	if err == nil {
		{{.EntityName | pascalCase}}, total, _ := waf{{.EntityName | pascalCase}}Service.GetListApi(req)
		response.OkWithDetailed(response.PageResult{
			List:      {{.EntityName | pascalCase}},
			Total:     total,
			PageIndex: req.PageIndex,
			PageSize:  req.PageSize,
		}, "获取成功", c)
	} else {
		response.FailWithMessage("解析失败", c)
	}
}

func (w *Waf{{.EntityName}}Api) DelApi(c *gin.Context) {
	var req request.Waf{{.EntityName}}DelReq
	err := c.ShouldBind(&req)
	if err == nil {
		err = waf{{.EntityName | pascalCase}}Service.DelApi(req)
		if err != nil && errors.Is(err, gorm.ErrRecordNotFound) {
			response.FailWithMessage("请检测参数", c)
		} else if err != nil {
			response.FailWithMessage("发生错误", c)
		} else {
			response.OkWithMessage("删除成功", c)
		}
	} else {
		response.FailWithMessage("解析失败", c)
	}
}

func (w *Waf{{.EntityName}}Api) ModifyApi(c *gin.Context) {
	var req request.Waf{{.EntityName}}EditReq
	err := c.ShouldBindJSON(&req)
	if err == nil {
		err = waf{{.EntityName | pascalCase}}Service.ModifyApi(req)
		if err != nil {
			response.FailWithMessage("编辑发生错误"+err.Error(), c)
		} else {
			response.OkWithMessage("编辑成功", c)
		}
	} else {
		response.FailWithMessage("解析失败", c)
	}
}