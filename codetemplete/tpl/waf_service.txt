package waf_service

import (
	"SamWaf/customtype"
	"SamWaf/global"
	"SamWaf/model"
	"SamWaf/model/baseorm"
	"SamWaf/model/request"
	"errors"
	uuid "github.com/satori/go.uuid"
	"time"
)

type Waf{{.EntityName}}Service struct{}

var Waf{{.EntityName}}ServiceApp = new(Waf{{.EntityName}}Service)

func (receiver *Waf{{.EntityName}}Service) AddApi(req request.Waf{{.EntityName}}AddReq) error {
	var bean = &model.{{.EntityName}}{
		BaseOrm: baseorm.BaseOrm{
			Id:          uuid.NewV4().String(),
			USER_CODE:   global.GWAF_USER_CODE,
			Tenant_ID:   global.GWAF_TENANT_ID,
			CREATE_TIME: customtype.JsonTime(time.Now()),
			UPDATE_TIME: customtype.JsonTime(time.Now()),
		},
        {{range .Fields}}
            {{- if not (or (eq .Name "Id") (eq .Name "USER_CODE") (eq .Name "Tenant_ID") (eq .Name "CREATE_TIME")  (eq .Name "UPDATE_TIME"))}}{{.Name}}: req.{{.Name}},
            {{- else}} {{- end}}
        {{end}}
	}
	global.GWAF_LOCAL_DB.Create(bean)
	return nil
}

 {{if .UniFields}}
func (receiver *Waf{{.EntityName}}Service) CheckIsExistApi(req request.Waf{{.EntityName}}AddReq) int {
        var total int64 = 0
    	/*where条件*/
    	var whereField = ""
    	var whereValues []interface{}
    	//where字段
    	whereField = ""

    	{{range .UniFields}}
    	if  {{if eq .SqlType "string"}} len(req.{{.Name}}) > 0  {{else}} req.{{.Name}} > 0 {{end}} {
    		if len(whereField) > 0 {
    			whereField = whereField + " and "
    		}
    		whereField = whereField + " {{.SqlField}}=? "
    	}
    	{{end}}
    	//where字段赋值
    	if len(req.Domain) > 0 {
    		whereValues = append(whereValues, req.Domain)
    	}
    	if req.Port > 0 {
    		whereValues = append(whereValues, req.Port)
    	}
    	global.GWAF_LOCAL_DB.Model(&model.{{.EntityName}}{}).Where(whereField, whereValues...).Count(&total)
    	return int(total)
}
{{end}}
func (receiver *Waf{{.EntityName}}Service) ModifyApi(req request.Waf{{.EntityName}}EditReq) error {
    // 根据唯一字段生成查询条件（只有在UniFields不为空时才进行存在性检查）
        {{if .UniFields}}

             var total int64 = 0
            /*where条件*/
            var whereField = ""
            var whereValues []interface{}
            //where字段
            whereField = ""

            {{range .UniFields}}
            if  {{if eq .SqlType "string"}} len(req.{{.Name}}) > 0  {{else}} req.{{.Name}} > 0 {{end}} {
                if len(whereField) > 0 {
                    whereField = whereField + " and "
                }
                whereField = whereField + " {{.SqlField}}=? "
            }
            {{end}}
            //where字段赋值
            if len(req.Domain) > 0 {
                whereValues = append(whereValues, req.Domain)
            }
            if req.Port > 0 {
                whereValues = append(whereValues, req.Port)
            }
            global.GWAF_LOCAL_DB.Model(&model.{{.EntityName}}{}).Where(whereField, whereValues...).Count(&total)
            // 查询是否已存在记录
            var bean model.{{.EntityName}}
            global.GWAF_LOCAL_DB.Model(&model.{{.EntityName}}{}).Where(whereField, whereValues...).Limit(1).Find(&bean)

            if int(total)>0 && bean.Id != "" && bean.Id != req.Id {
                return errors.New("当前记录已经存在")
            }
    {{end}}

        beanMap := map[string]interface{}{
             {{range .Fields}}
                        {{- if not (or (eq .Name "Id") (eq .Name "USER_CODE") (eq .Name "Tenant_ID") (eq .Name "CREATE_TIME")  (eq .Name "UPDATE_TIME"))}}"{{.Name}}": req.{{.Name}},
                        {{- else}} {{- end}}
             {{end}}
            "UPDATE_TIME": customtype.JsonTime(time.Now()),
        }
        err := global.GWAF_LOCAL_DB.Model(model.{{.EntityName}}{}).Where("id = ?", req.Id).Updates(beanMap).Error

        return err
}
func (receiver *Waf{{.EntityName}}Service) GetDetailApi(req request.Waf{{.EntityName}}DetailReq) model.{{.EntityName}} {
	var bean model.{{.EntityName}}
	global.GWAF_LOCAL_DB.Where("id=?", req.Id).Find(&bean)
	return bean
}
func (receiver *Waf{{.EntityName}}Service) GetDetailByIdApi(id string) model.{{.EntityName}} {
	var bean model.{{.EntityName}}
	global.GWAF_LOCAL_DB.Where("id=?", id).Find(&bean)
	return bean
}
func (receiver *Waf{{.EntityName}}Service) GetListApi(req request.Waf{{.EntityName}}SearchReq) ([]model.{{.EntityName}}, int64, error) {
	var list []model.{{.EntityName}}
	var total int64 = 0
	global.GWAF_LOCAL_DB.Model(&model.{{.EntityName}}{}).Limit(req.PageSize).Offset(req.PageSize * (req.PageIndex - 1)).Find(&list)
	global.GWAF_LOCAL_DB.Model(&model.{{.EntityName}}{}).Count(&total)

	return list, total, nil
}
func (receiver *Waf{{.EntityName}}Service) DelApi(req request.Waf{{.EntityName}}DelReq) error {
	var bean model.{{.EntityName}}
	err := global.GWAF_LOCAL_DB.Where("id = ?", req.Id).First(&bean).Error
	if err != nil {
		return err
	}
	err = global.GWAF_LOCAL_DB.Where("id = ?", req.Id).Delete(model.{{.EntityName}}{}).Error
	return err
}
